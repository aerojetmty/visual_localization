import os
import glob
from PIL import Image
from PIL.ExifTags import TAGS, GPSTAGS
import pandas as pd

# Function to extract GPS metadata from an image
def extract_gps_info(image_path):
    image = Image.open(image_path)
    exif_data = image._getexif()

    if not exif_data:
        return None

    gps_info = {}
    for tag, value in exif_data.items():
        tag_name = TAGS.get(tag, tag)
        if tag_name == "GPSInfo":
            for key in value.keys():
                name = GPSTAGS.get(key, key)
                gps_info[name] = value[key]
                
    return gps_info

# Convert DMS to Decimal Degrees
def get_decimal_from_dms(dms, ref):
    try:
        degrees = float(dms[0])
        minutes = float(dms[1])
        seconds = float(dms[2])

        decimal = degrees + (minutes / 60.0) + (seconds / 3600.0)
        if ref in ['S', 'W']:
            decimal = -decimal
        return decimal
    except Exception as e:
        print(f"Error converting DMS to decimal: {e}")
        return None


# Extract Latitude, Longitude, Altitude from image
def extract_coordinates(image_path):
    gps_info = extract_gps_info(image_path)
    if not gps_info:
        return None

    lat = get_decimal_from_dms(gps_info['GPSLatitude'], gps_info['GPSLatitudeRef'])
    lon = get_decimal_from_dms(gps_info['GPSLongitude'], gps_info['GPSLongitudeRef'])
    alt_data = gps_info.get('GPSAltitude')
    altitude = float(alt_data) if alt_data else None

    return {'Latitude': lat, 'Longitude': lon, 'Altitude': altitude}

# Path to the folder containing your images
folder_path = r"C:\Users\Ville\Documents\GitHub\visual_localization\data\query"

# Automatically read all images from the folder (Supports .jpg and .png files)
image_paths = glob.glob(os.path.join(folder_path, "*.jpg")) + glob.glob(os.path.join(folder_path, "*.png"))

# Extract data and store in a list
extracted_data = []
for path in image_paths:
    coordinates = extract_coordinates(path)
    if coordinates:
        extracted_data.append([os.path.basename(path), coordinates['Latitude'], coordinates['Longitude'], coordinates['Altitude']])

# Check if extracted data is not empty
if extracted_data:
    # Create a DataFrame
    df = pd.DataFrame(extracted_data, columns=['Filename', 'Latitude', 'Longitude', 'Altitude'])
    
    # Save the data to a CSV file
    output_file = os.path.join(folder_path, "photo_metadata.csv")
    df.to_csv(output_file, index=False)
    print(f"✅ GPS data has been successfully saved to {output_file}")
else:
    print("❌ No GPS data was extracted. Please check your images and try again.")
